yarn run v1.22.17
$ tsdx test --json
{"numFailedTestSuites":3,"numFailedTests":8,"numPassedTestSuites":6,"numPassedTests":117,"numPendingTestSuites":1,"numPendingTests":3,"numRuntimeErrorTestSuites":0,"numTodoTests":0,"numTotalTestSuites":10,"numTotalTests":128,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1636402092343,"success":false,"testResults":[{"assertionResults":[{"ancestorTitles":["entities","decimals permutation: 0,0,0"],"failureMessages":[],"fullName":"entities decimals permutation: 0,0,0 Token","location":null,"status":"passed","title":"Token"},{"ancestorTitles":["entities","decimals permutation: 0,0,0"],"failureMessages":[],"fullName":"entities decimals permutation: 0,0,0 Pair","location":null,"status":"passed","title":"Pair"},{"ancestorTitles":["entities","decimals permutation: 0,0,0"],"failureMessages":[],"fullName":"entities decimals permutation: 0,0,0 Route","location":null,"status":"passed","title":"Route"},{"ancestorTitles":["entities","decimals permutation: 0,0,0"],"failureMessages":[],"fullName":"entities decimals permutation: 0,0,0 Price:Route.midPrice","location":null,"status":"passed","title":"Price:Route.midPrice"},{"ancestorTitles":["entities","decimals permutation: 0,0,0","Trade"],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected\n+ Received\n\n@@ -10,12 +10,12 @@\n    \"denominator\": JSBI [\n      -1486618624,\n      232830643,\n    ],\n    \"numerator\": JSBI [\n-     -996157254,\n-     387080459,\n+     134165932,\n+     387242296,\n    ],\n    \"token\": Token {\n      \"address\": \"0xaE8E19eFB41e7b96815649A6a60785e1fbA84C1e\",\n      \"chainId\": 97,\n      \"decimals\": 18,\n    at Object.<anonymous> (/Users/admin/Desktop/pancakeSwapClone/pancake-swap-sdk/test/entities.test.ts:118:38)\n    at Object.asyncJestTest (/Users/admin/Desktop/pancakeSwapClone/pancake-swap-sdk/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:102:37)\n    at /Users/admin/Desktop/pancakeSwapClone/pancake-swap-sdk/node_modules/jest-jasmine2/build/queueRunner.js:43:12\n    at new Promise (<anonymous>)\n    at mapper (/Users/admin/Desktop/pancakeSwapClone/pancake-swap-sdk/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at /Users/admin/Desktop/pancakeSwapClone/pancake-swap-sdk/node_modules/jest-jasmine2/build/queueRunner.js:73:41"],"fullName":"entities decimals permutation: 0,0,0 Trade TradeType.EXACT_INPUT","location":null,"status":"failed","title":"TradeType.EXACT_INPUT"},{"ancestorTitles":["entities","decimals permutation: 0,0,0","Trade"],"failureMessages":[],"fullName":"entities decimals permutation: 0,0,0 Trade TradeType.EXACT_OUTPUT","location":null,"status":"passed","title":"TradeType.EXACT_OUTPUT"},{"ancestorTitles":["entities","decimals permutation: 0,0,0","Trade"],"failureMessages":[],"fullName":"entities decimals permutation: 0,0,0 Trade minimum TradeType.EXACT_INPUT","location":null,"status":"passed","title":"minimum TradeType.EXACT_INPUT"},{"ancestorTitles":["entities","decimals permutation: 0,0,0"],"failureMessages":[],"fullName":"entities decimals permutation: 0,0,0 TokenAmount","location":null,"status":"passed","title":"TokenAmount"},{"ancestorTitles":["entities","decimals permutation: 0,9,18"],"failureMessages":[],"fullName":"entities decimals permutation: 0,9,18 Token","location":null,"status":"passed","title":"Token"},{"ancestorTitles":["entities","decimals permutation: 0,9,18"],"failureMessages":[],"fullName":"entities decimals permutation: 0,9,18 Pair","location":null,"status":"passed","title":"Pair"},{"ancestorTitles":["entities","decimals permutation: 0,9,18"],"failureMessages":[],"fullName":"entities decimals permutation: 0,9,18 Route","location":null,"status":"passed","title":"Route"},{"ancestorTitles":["entities","decimals permutation: 0,9,18"],"failureMessages":[],"fullName":"entities decimals permutation: 0,9,18 Price:Route.midPrice","location":null,"status":"passed","title":"Price:Route.midPrice"},{"ancestorTitles":["entities","decimals permutation: 0,9,18","Trade"],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected\n+ Received\n\n@@ -10,12 +10,12 @@\n    \"denominator\": JSBI [\n      -1486618624,\n      232830643,\n    ],\n    \"numerator\": JSBI [\n-     -996157254,\n-     387080459,\n+     134165932,\n+     387242296,\n    ],\n    \"token\": Token {\n      \"address\": \"0xaE8E19eFB41e7b96815649A6a60785e1fbA84C1e\",\n      \"chainId\": 97,\n      \"decimals\": 18,\n    at Object.<anonymous> (/Users/admin/Desktop/pancakeSwapClone/pancake-swap-sdk/test/entities.test.ts:118:38)\n    at Object.asyncJestTest (/Users/admin/Desktop/pancakeSwapClone/pancake-swap-sdk/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:102:37)\n    at /Users/admin/Desktop/pancakeSwapClone/pancake-swap-sdk/node_modules/jest-jasmine2/build/queueRunner.js:43:12\n    at new Promise (<anonymous>)\n    at mapper (/Users/admin/Desktop/pancakeSwapClone/pancake-swap-sdk/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at /Users/admin/Desktop/pancakeSwapClone/pancake-swap-sdk/node_modules/jest-jasmine2/build/queueRunner.js:73:41"],"fullName":"entities decimals permutation: 0,9,18 Trade TradeType.EXACT_INPUT","location":null,"status":"failed","title":"TradeType.EXACT_INPUT"},{"ancestorTitles":["entities","decimals permutation: 0,9,18","Trade"],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected\n+ Received\n\n@@ -9,11 +9,11 @@\n    },\n    \"denominator\": JSBI [\n      1000000000,\n    ],\n    \"numerator\": JSBI [\n-     1000000000,\n+     999498747,\n    ],\n    \"token\": Token {\n      \"address\": \"0x0000000000000000000000000000000000000002\",\n      \"chainId\": 97,\n      \"decimals\": 9,\n    at Object.<anonymous> (/Users/admin/Desktop/pancakeSwapClone/pancake-swap-sdk/test/entities.test.ts:138:37)\n    at Object.asyncJestTest (/Users/admin/Desktop/pancakeSwapClone/pancake-swap-sdk/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:102:37)\n    at /Users/admin/Desktop/pancakeSwapClone/pancake-swap-sdk/node_modules/jest-jasmine2/build/queueRunner.js:43:12\n    at new Promise (<anonymous>)\n    at mapper (/Users/admin/Desktop/pancakeSwapClone/pancake-swap-sdk/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at /Users/admin/Desktop/pancakeSwapClone/pancake-swap-sdk/node_modules/jest-jasmine2/build/queueRunner.js:73:41"],"fullName":"entities decimals permutation: 0,9,18 Trade TradeType.EXACT_OUTPUT","location":null,"status":"failed","title":"TradeType.EXACT_OUTPUT"},{"ancestorTitles":["entities","decimals permutation: 0,9,18","Trade"],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\nExpected: \"0.300000099400899902\"\nReceived: \"0.2500001008007499\"\n    at Object.<anonymous> (/Users/admin/Desktop/pancakeSwapClone/pancake-swap-sdk/test/entities.test.ts:169:57)\n    at Object.asyncJestTest (/Users/admin/Desktop/pancakeSwapClone/pancake-swap-sdk/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:102:37)\n    at /Users/admin/Desktop/pancakeSwapClone/pancake-swap-sdk/node_modules/jest-jasmine2/build/queueRunner.js:43:12\n    at new Promise (<anonymous>)\n    at mapper (/Users/admin/Desktop/pancakeSwapClone/pancake-swap-sdk/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at /Users/admin/Desktop/pancakeSwapClone/pancake-swap-sdk/node_modules/jest-jasmine2/build/queueRunner.js:73:41"],"fullName":"entities decimals permutation: 0,9,18 Trade minimum TradeType.EXACT_INPUT","location":null,"status":"failed","title":"minimum TradeType.EXACT_INPUT"},{"ancestorTitles":["entities","decimals permutation: 0,9,18"],"failureMessages":[],"fullName":"entities decimals permutation: 0,9,18 TokenAmount","location":null,"status":"passed","title":"TokenAmount"},{"ancestorTitles":["entities","decimals permutation: 18,18,18"],"failureMessages":[],"fullName":"entities decimals permutation: 18,18,18 Token","location":null,"status":"passed","title":"Token"},{"ancestorTitles":["entities","decimals permutation: 18,18,18"],"failureMessages":[],"fullName":"entities decimals permutation: 18,18,18 Pair","location":null,"status":"passed","title":"Pair"},{"ancestorTitles":["entities","decimals permutation: 18,18,18"],"failureMessages":[],"fullName":"entities decimals permutation: 18,18,18 Route","location":null,"status":"passed","title":"Route"},{"ancestorTitles":["entities","decimals permutation: 18,18,18"],"failureMessages":[],"fullName":"entities decimals permutation: 18,18,18 Price:Route.midPrice","location":null,"status":"passed","title":"Price:Route.midPrice"},{"ancestorTitles":["entities","decimals permutation: 18,18,18","Trade"],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected\n+ Received\n\n@@ -10,12 +10,12 @@\n    \"denominator\": JSBI [\n      -1486618624,\n      232830643,\n    ],\n    \"numerator\": JSBI [\n-     -996157254,\n-     387080459,\n+     134165932,\n+     387242296,\n    ],\n    \"token\": Token {\n      \"address\": \"0xaE8E19eFB41e7b96815649A6a60785e1fbA84C1e\",\n      \"chainId\": 97,\n      \"decimals\": 18,\n    at Object.<anonymous> (/Users/admin/Desktop/pancakeSwapClone/pancake-swap-sdk/test/entities.test.ts:118:38)\n    at Object.asyncJestTest (/Users/admin/Desktop/pancakeSwapClone/pancake-swap-sdk/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:102:37)\n    at /Users/admin/Desktop/pancakeSwapClone/pancake-swap-sdk/node_modules/jest-jasmine2/build/queueRunner.js:43:12\n    at new Promise (<anonymous>)\n    at mapper (/Users/admin/Desktop/pancakeSwapClone/pancake-swap-sdk/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at /Users/admin/Desktop/pancakeSwapClone/pancake-swap-sdk/node_modules/jest-jasmine2/build/queueRunner.js:73:41"],"fullName":"entities decimals permutation: 18,18,18 Trade TradeType.EXACT_INPUT","location":null,"status":"failed","title":"TradeType.EXACT_INPUT"},{"ancestorTitles":["entities","decimals permutation: 18,18,18","Trade"],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected\n+ Received\n\n@@ -10,12 +10,12 @@\n    \"denominator\": JSBI [\n      -1486618624,\n      232830643,\n    ],\n    \"numerator\": JSBI [\n-     -1486618624,\n-     232830643,\n+     -1871236432,\n+     232713936,\n    ],\n    \"token\": Token {\n      \"address\": \"0x0000000000000000000000000000000000000002\",\n      \"chainId\": 97,\n      \"decimals\": 18,\n    at Object.<anonymous> (/Users/admin/Desktop/pancakeSwapClone/pancake-swap-sdk/test/entities.test.ts:138:37)\n    at Object.asyncJestTest (/Users/admin/Desktop/pancakeSwapClone/pancake-swap-sdk/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:102:37)\n    at /Users/admin/Desktop/pancakeSwapClone/pancake-swap-sdk/node_modules/jest-jasmine2/build/queueRunner.js:43:12\n    at new Promise (<anonymous>)\n    at mapper (/Users/admin/Desktop/pancakeSwapClone/pancake-swap-sdk/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at /Users/admin/Desktop/pancakeSwapClone/pancake-swap-sdk/node_modules/jest-jasmine2/build/queueRunner.js:73:41"],"fullName":"entities decimals permutation: 18,18,18 Trade TradeType.EXACT_OUTPUT","location":null,"status":"failed","title":"TradeType.EXACT_OUTPUT"},{"ancestorTitles":["entities","decimals permutation: 18,18,18","Trade"],"failureMessages":[],"fullName":"entities decimals permutation: 18,18,18 Trade minimum TradeType.EXACT_INPUT","location":null,"status":"passed","title":"minimum TradeType.EXACT_INPUT"},{"ancestorTitles":["entities","decimals permutation: 18,18,18"],"failureMessages":[],"fullName":"entities decimals permutation: 18,18,18 TokenAmount","location":null,"status":"passed","title":"TokenAmount"}],"endTime":1636402093069,"message":"  ● entities › decimals permutation: 0,0,0 › Trade › TradeType.EXACT_INPUT\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected\n    + Received\n\n    @@ -10,12 +10,12 @@\n        \"denominator\": JSBI [\n          -1486618624,\n          232830643,\n        ],\n        \"numerator\": JSBI [\n    -     -996157254,\n    -     387080459,\n    +     134165932,\n    +     387242296,\n        ],\n        \"token\": Token {\n          \"address\": \"0xaE8E19eFB41e7b96815649A6a60785e1fbA84C1e\",\n          \"chainId\": 97,\n          \"decimals\": 18,\n\n      116 |           expect(trade.tradeType).toEqual(TradeType.EXACT_INPUT)\n      117 |           expect(trade.inputAmount).toEqual(inputAmount)\n    > 118 |           expect(trade.outputAmount).toEqual(expectedOutputAmount)\n          |                                      ^\n      119 | \n      120 |           expect(trade.executionPrice.toSignificant(18)).toEqual('1.66249791562447891')\n      121 |           expect(trade.executionPrice.invert().toSignificant(18)).toEqual('0.601504513540621866')\n\n      at Object.<anonymous> (test/entities.test.ts:118:38)\n\n  ● entities › decimals permutation: 0,9,18 › Trade › TradeType.EXACT_INPUT\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected\n    + Received\n\n    @@ -10,12 +10,12 @@\n        \"denominator\": JSBI [\n          -1486618624,\n          232830643,\n        ],\n        \"numerator\": JSBI [\n    -     -996157254,\n    -     387080459,\n    +     134165932,\n    +     387242296,\n        ],\n        \"token\": Token {\n          \"address\": \"0xaE8E19eFB41e7b96815649A6a60785e1fbA84C1e\",\n          \"chainId\": 97,\n          \"decimals\": 18,\n\n      116 |           expect(trade.tradeType).toEqual(TradeType.EXACT_INPUT)\n      117 |           expect(trade.inputAmount).toEqual(inputAmount)\n    > 118 |           expect(trade.outputAmount).toEqual(expectedOutputAmount)\n          |                                      ^\n      119 | \n      120 |           expect(trade.executionPrice.toSignificant(18)).toEqual('1.66249791562447891')\n      121 |           expect(trade.executionPrice.invert().toSignificant(18)).toEqual('0.601504513540621866')\n\n      at Object.<anonymous> (test/entities.test.ts:118:38)\n\n  ● entities › decimals permutation: 0,9,18 › Trade › TradeType.EXACT_OUTPUT\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected\n    + Received\n\n    @@ -9,11 +9,11 @@\n        },\n        \"denominator\": JSBI [\n          1000000000,\n        ],\n        \"numerator\": JSBI [\n    -     1000000000,\n    +     999498747,\n        ],\n        \"token\": Token {\n          \"address\": \"0x0000000000000000000000000000000000000002\",\n          \"chainId\": 97,\n          \"decimals\": 9,\n\n      136 |           expect(trade.tradeType).toEqual(TradeType.EXACT_OUTPUT)\n      137 |           expect(trade.outputAmount).toEqual(outputAmount)\n    > 138 |           expect(trade.inputAmount).toEqual(expectedInputAmount)\n          |                                     ^\n      139 | \n      140 |           expect(trade.executionPrice.toSignificant(18)).toEqual('1.66249791562447891')\n      141 |           expect(trade.executionPrice.invert().toSignificant(18)).toEqual('0.601504513540621866')\n\n      at Object.<anonymous> (test/entities.test.ts:138:37)\n\n  ● entities › decimals permutation: 0,9,18 › Trade › minimum TradeType.EXACT_INPUT\n\n    expect(received).toEqual(expected) // deep equality\n\n    Expected: \"0.300000099400899902\"\n    Received: \"0.2500001008007499\"\n\n      167 |             const trade = new Trade(route, outputAmount, TradeType.EXACT_INPUT)\n      168 | \n    > 169 |             expect(trade.priceImpact.toSignificant(18)).toEqual(\n          |                                                         ^\n      170 |               tokens[1].decimals === 9 ? '0.300000099400899902' : '0.3000000000000001'\n      171 |             )\n      172 |           }\n\n      at Object.<anonymous> (test/entities.test.ts:169:57)\n\n  ● entities › decimals permutation: 18,18,18 › Trade › TradeType.EXACT_INPUT\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected\n    + Received\n\n    @@ -10,12 +10,12 @@\n        \"denominator\": JSBI [\n          -1486618624,\n          232830643,\n        ],\n        \"numerator\": JSBI [\n    -     -996157254,\n    -     387080459,\n    +     134165932,\n    +     387242296,\n        ],\n        \"token\": Token {\n          \"address\": \"0xaE8E19eFB41e7b96815649A6a60785e1fbA84C1e\",\n          \"chainId\": 97,\n          \"decimals\": 18,\n\n      116 |           expect(trade.tradeType).toEqual(TradeType.EXACT_INPUT)\n      117 |           expect(trade.inputAmount).toEqual(inputAmount)\n    > 118 |           expect(trade.outputAmount).toEqual(expectedOutputAmount)\n          |                                      ^\n      119 | \n      120 |           expect(trade.executionPrice.toSignificant(18)).toEqual('1.66249791562447891')\n      121 |           expect(trade.executionPrice.invert().toSignificant(18)).toEqual('0.601504513540621866')\n\n      at Object.<anonymous> (test/entities.test.ts:118:38)\n\n  ● entities › decimals permutation: 18,18,18 › Trade › TradeType.EXACT_OUTPUT\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected\n    + Received\n\n    @@ -10,12 +10,12 @@\n        \"denominator\": JSBI [\n          -1486618624,\n          232830643,\n        ],\n        \"numerator\": JSBI [\n    -     -1486618624,\n    -     232830643,\n    +     -1871236432,\n    +     232713936,\n        ],\n        \"token\": Token {\n          \"address\": \"0x0000000000000000000000000000000000000002\",\n          \"chainId\": 97,\n          \"decimals\": 18,\n\n      136 |           expect(trade.tradeType).toEqual(TradeType.EXACT_OUTPUT)\n      137 |           expect(trade.outputAmount).toEqual(outputAmount)\n    > 138 |           expect(trade.inputAmount).toEqual(expectedInputAmount)\n          |                                     ^\n      139 | \n      140 |           expect(trade.executionPrice.toSignificant(18)).toEqual('1.66249791562447891')\n      141 |           expect(trade.executionPrice.invert().toSignificant(18)).toEqual('0.601504513540621866')\n\n      at Object.<anonymous> (test/entities.test.ts:138:37)\n","name":"/Users/admin/Desktop/pancakeSwapClone/pancake-swap-sdk/test/entities.test.ts","startTime":1636402092600,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["Pair","constructor"],"failureMessages":[],"fullName":"Pair constructor cannot be used for tokens on different chains","location":null,"status":"passed","title":"cannot be used for tokens on different chains"},{"ancestorTitles":["Pair","#getAddress"],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\nExpected: \"0xAE461cA67B15dc8dc81CE7615e0320dA1A9aB8D5\"\nReceived: \"0xEeC9cA661B7876d4e223C95D6f3b856238dCCDCb\"\n    at Object.<anonymous> (/Users/admin/Desktop/pancakeSwapClone/pancake-swap-sdk/test/pair.test.ts:17:42)\n    at Object.asyncJestTest (/Users/admin/Desktop/pancakeSwapClone/pancake-swap-sdk/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:102:37)\n    at /Users/admin/Desktop/pancakeSwapClone/pancake-swap-sdk/node_modules/jest-jasmine2/build/queueRunner.js:43:12\n    at new Promise (<anonymous>)\n    at mapper (/Users/admin/Desktop/pancakeSwapClone/pancake-swap-sdk/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at /Users/admin/Desktop/pancakeSwapClone/pancake-swap-sdk/node_modules/jest-jasmine2/build/queueRunner.js:73:41"],"fullName":"Pair #getAddress returns the correct address","location":null,"status":"failed","title":"returns the correct address"},{"ancestorTitles":["Pair","#token0"],"failureMessages":[],"fullName":"Pair #token0 always is the token that sorts before","location":null,"status":"passed","title":"always is the token that sorts before"},{"ancestorTitles":["Pair","#token1"],"failureMessages":[],"fullName":"Pair #token1 always is the token that sorts after","location":null,"status":"passed","title":"always is the token that sorts after"},{"ancestorTitles":["Pair","#reserve0"],"failureMessages":[],"fullName":"Pair #reserve0 always comes from the token that sorts before","location":null,"status":"passed","title":"always comes from the token that sorts before"},{"ancestorTitles":["Pair","#reserve1"],"failureMessages":[],"fullName":"Pair #reserve1 always comes from the token that sorts after","location":null,"status":"passed","title":"always comes from the token that sorts after"},{"ancestorTitles":["Pair","#token0Price"],"failureMessages":[],"fullName":"Pair #token0Price returns price of token0 in terms of token1","location":null,"status":"passed","title":"returns price of token0 in terms of token1"},{"ancestorTitles":["Pair","#token1Price"],"failureMessages":[],"fullName":"Pair #token1Price returns price of token1 in terms of token0","location":null,"status":"passed","title":"returns price of token1 in terms of token0"},{"ancestorTitles":["Pair","#priceOf"],"failureMessages":[],"fullName":"Pair #priceOf returns price of token in terms of other token","location":null,"status":"passed","title":"returns price of token in terms of other token"},{"ancestorTitles":["Pair","#priceOf"],"failureMessages":[],"fullName":"Pair #priceOf throws if invalid token","location":null,"status":"passed","title":"throws if invalid token"},{"ancestorTitles":["Pair","#reserveOf"],"failureMessages":[],"fullName":"Pair #reserveOf returns reserves of the given token","location":null,"status":"passed","title":"returns reserves of the given token"},{"ancestorTitles":["Pair","#reserveOf"],"failureMessages":[],"fullName":"Pair #reserveOf throws if not in the pair","location":null,"status":"passed","title":"throws if not in the pair"},{"ancestorTitles":["Pair","#chainId"],"failureMessages":[],"fullName":"Pair #chainId returns the token0 chainId","location":null,"status":"passed","title":"returns the token0 chainId"}],"endTime":1636402093124,"message":"  ● Pair › #getAddress › returns the correct address\n\n    expect(received).toEqual(expected) // deep equality\n\n    Expected: \"0xAE461cA67B15dc8dc81CE7615e0320dA1A9aB8D5\"\n    Received: \"0xEeC9cA661B7876d4e223C95D6f3b856238dCCDCb\"\n\n      15 |   describe('#getAddress', () => {\n      16 |     it('returns the correct address', () => {\n    > 17 |       expect(Pair.getAddress(USDC, DAI)).toEqual('0xAE461cA67B15dc8dc81CE7615e0320dA1A9aB8D5')\n         |                                          ^\n      18 |     })\n      19 |   })\n      20 | \n\n      at Object.<anonymous> (test/pair.test.ts:17:42)\n","name":"/Users/admin/Desktop/pancakeSwapClone/pancake-swap-sdk/test/pair.test.ts","startTime":1636402093073,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["constants","INIT_CODE_HASH"],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\nExpected: \"0x00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5\"\nReceived: \"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\"\n    at Object.<anonymous> (/Users/admin/Desktop/pancakeSwapClone/pancake-swap-sdk/test/constants.test.ts:13:39)\n    at Object.asyncJestTest (/Users/admin/Desktop/pancakeSwapClone/pancake-swap-sdk/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:102:37)\n    at /Users/admin/Desktop/pancakeSwapClone/pancake-swap-sdk/node_modules/jest-jasmine2/build/queueRunner.js:43:12\n    at new Promise (<anonymous>)\n    at mapper (/Users/admin/Desktop/pancakeSwapClone/pancake-swap-sdk/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at /Users/admin/Desktop/pancakeSwapClone/pancake-swap-sdk/node_modules/jest-jasmine2/build/queueRunner.js:73:41"],"fullName":"constants INIT_CODE_HASH matches computed bytecode hash","location":null,"status":"failed","title":"matches computed bytecode hash"}],"endTime":1636402093151,"message":"  ● constants › INIT_CODE_HASH › matches computed bytecode hash\n\n    expect(received).toEqual(expected) // deep equality\n\n    Expected: \"0x00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5\"\n    Received: \"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\"\n\n      11 |   describe('INIT_CODE_HASH', () => {\n      12 |     it('matches computed bytecode hash', () => {\n    > 13 |       expect(COMPUTED_INIT_CODE_HASH).toEqual(INIT_CODE_HASH)\n         |                                       ^\n      14 |     })\n      15 |   })\n      16 | })\n\n      at Object.<anonymous> (test/constants.test.ts:13:39)\n","name":"/Users/admin/Desktop/pancakeSwapClone/pancake-swap-sdk/test/constants.test.ts","startTime":1636402093126,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["Trade"],"failureMessages":[],"fullName":"Trade can be constructed with ETHER as input","location":null,"status":"passed","title":"can be constructed with ETHER as input"},{"ancestorTitles":["Trade"],"failureMessages":[],"fullName":"Trade can be constructed with ETHER as input for exact output","location":null,"status":"passed","title":"can be constructed with ETHER as input for exact output"},{"ancestorTitles":["Trade"],"failureMessages":[],"fullName":"Trade can be constructed with ETHER as output","location":null,"status":"passed","title":"can be constructed with ETHER as output"},{"ancestorTitles":["Trade"],"failureMessages":[],"fullName":"Trade can be constructed with ETHER as output for exact input","location":null,"status":"passed","title":"can be constructed with ETHER as output for exact input"},{"ancestorTitles":["Trade","#bestTradeExactIn"],"failureMessages":[],"fullName":"Trade #bestTradeExactIn throws with empty pairs","location":null,"status":"passed","title":"throws with empty pairs"},{"ancestorTitles":["Trade","#bestTradeExactIn"],"failureMessages":[],"fullName":"Trade #bestTradeExactIn throws with max hops of 0","location":null,"status":"passed","title":"throws with max hops of 0"},{"ancestorTitles":["Trade","#bestTradeExactIn"],"failureMessages":[],"fullName":"Trade #bestTradeExactIn provides best route","location":null,"status":"passed","title":"provides best route"},{"ancestorTitles":["Trade","#bestTradeExactIn"],"failureMessages":[],"fullName":"Trade #bestTradeExactIn doesnt throw for zero liquidity pairs","location":null,"status":"passed","title":"doesnt throw for zero liquidity pairs"},{"ancestorTitles":["Trade","#bestTradeExactIn"],"failureMessages":[],"fullName":"Trade #bestTradeExactIn respects maxHops","location":null,"status":"passed","title":"respects maxHops"},{"ancestorTitles":["Trade","#bestTradeExactIn"],"failureMessages":[],"fullName":"Trade #bestTradeExactIn insufficient input for one pair","location":null,"status":"passed","title":"insufficient input for one pair"},{"ancestorTitles":["Trade","#bestTradeExactIn"],"failureMessages":[],"fullName":"Trade #bestTradeExactIn respects n","location":null,"status":"passed","title":"respects n"},{"ancestorTitles":["Trade","#bestTradeExactIn"],"failureMessages":[],"fullName":"Trade #bestTradeExactIn no path","location":null,"status":"passed","title":"no path"},{"ancestorTitles":["Trade","#bestTradeExactIn"],"failureMessages":[],"fullName":"Trade #bestTradeExactIn works for ETHER currency input","location":null,"status":"passed","title":"works for ETHER currency input"},{"ancestorTitles":["Trade","#bestTradeExactIn"],"failureMessages":[],"fullName":"Trade #bestTradeExactIn works for ETHER currency output","location":null,"status":"passed","title":"works for ETHER currency output"},{"ancestorTitles":["Trade","#maximumAmountIn","tradeType = EXACT_INPUT"],"failureMessages":[],"fullName":"Trade #maximumAmountIn tradeType = EXACT_INPUT throws if less than 0","location":null,"status":"passed","title":"throws if less than 0"},{"ancestorTitles":["Trade","#maximumAmountIn","tradeType = EXACT_INPUT"],"failureMessages":[],"fullName":"Trade #maximumAmountIn tradeType = EXACT_INPUT returns exact if 0","location":null,"status":"passed","title":"returns exact if 0"},{"ancestorTitles":["Trade","#maximumAmountIn","tradeType = EXACT_INPUT"],"failureMessages":[],"fullName":"Trade #maximumAmountIn tradeType = EXACT_INPUT returns exact if nonzero","location":null,"status":"passed","title":"returns exact if nonzero"},{"ancestorTitles":["Trade","#maximumAmountIn","tradeType = EXACT_OUTPUT"],"failureMessages":[],"fullName":"Trade #maximumAmountIn tradeType = EXACT_OUTPUT throws if less than 0","location":null,"status":"passed","title":"throws if less than 0"},{"ancestorTitles":["Trade","#maximumAmountIn","tradeType = EXACT_OUTPUT"],"failureMessages":[],"fullName":"Trade #maximumAmountIn tradeType = EXACT_OUTPUT returns exact if 0","location":null,"status":"passed","title":"returns exact if 0"},{"ancestorTitles":["Trade","#maximumAmountIn","tradeType = EXACT_OUTPUT"],"failureMessages":[],"fullName":"Trade #maximumAmountIn tradeType = EXACT_OUTPUT returns slippage amount if nonzero","location":null,"status":"passed","title":"returns slippage amount if nonzero"},{"ancestorTitles":["Trade","#minimumAmountOut","tradeType = EXACT_INPUT"],"failureMessages":[],"fullName":"Trade #minimumAmountOut tradeType = EXACT_INPUT throws if less than 0","location":null,"status":"passed","title":"throws if less than 0"},{"ancestorTitles":["Trade","#minimumAmountOut","tradeType = EXACT_INPUT"],"failureMessages":[],"fullName":"Trade #minimumAmountOut tradeType = EXACT_INPUT returns exact if 0","location":null,"status":"passed","title":"returns exact if 0"},{"ancestorTitles":["Trade","#minimumAmountOut","tradeType = EXACT_INPUT"],"failureMessages":[],"fullName":"Trade #minimumAmountOut tradeType = EXACT_INPUT returns exact if nonzero","location":null,"status":"passed","title":"returns exact if nonzero"},{"ancestorTitles":["Trade","#minimumAmountOut","tradeType = EXACT_OUTPUT"],"failureMessages":[],"fullName":"Trade #minimumAmountOut tradeType = EXACT_OUTPUT throws if less than 0","location":null,"status":"passed","title":"throws if less than 0"},{"ancestorTitles":["Trade","#minimumAmountOut","tradeType = EXACT_OUTPUT"],"failureMessages":[],"fullName":"Trade #minimumAmountOut tradeType = EXACT_OUTPUT returns exact if 0","location":null,"status":"passed","title":"returns exact if 0"},{"ancestorTitles":["Trade","#minimumAmountOut","tradeType = EXACT_OUTPUT"],"failureMessages":[],"fullName":"Trade #minimumAmountOut tradeType = EXACT_OUTPUT returns slippage amount if nonzero","location":null,"status":"passed","title":"returns slippage amount if nonzero"},{"ancestorTitles":["Trade","#bestTradeExactOut"],"failureMessages":[],"fullName":"Trade #bestTradeExactOut throws with empty pairs","location":null,"status":"passed","title":"throws with empty pairs"},{"ancestorTitles":["Trade","#bestTradeExactOut"],"failureMessages":[],"fullName":"Trade #bestTradeExactOut throws with max hops of 0","location":null,"status":"passed","title":"throws with max hops of 0"},{"ancestorTitles":["Trade","#bestTradeExactOut"],"failureMessages":[],"fullName":"Trade #bestTradeExactOut provides best route","location":null,"status":"passed","title":"provides best route"},{"ancestorTitles":["Trade","#bestTradeExactOut"],"failureMessages":[],"fullName":"Trade #bestTradeExactOut doesnt throw for zero liquidity pairs","location":null,"status":"passed","title":"doesnt throw for zero liquidity pairs"},{"ancestorTitles":["Trade","#bestTradeExactOut"],"failureMessages":[],"fullName":"Trade #bestTradeExactOut respects maxHops","location":null,"status":"passed","title":"respects maxHops"},{"ancestorTitles":["Trade","#bestTradeExactOut"],"failureMessages":[],"fullName":"Trade #bestTradeExactOut insufficient liquidity","location":null,"status":"passed","title":"insufficient liquidity"},{"ancestorTitles":["Trade","#bestTradeExactOut"],"failureMessages":[],"fullName":"Trade #bestTradeExactOut insufficient liquidity in one pair but not the other","location":null,"status":"passed","title":"insufficient liquidity in one pair but not the other"},{"ancestorTitles":["Trade","#bestTradeExactOut"],"failureMessages":[],"fullName":"Trade #bestTradeExactOut respects n","location":null,"status":"passed","title":"respects n"},{"ancestorTitles":["Trade","#bestTradeExactOut"],"failureMessages":[],"fullName":"Trade #bestTradeExactOut no path","location":null,"status":"passed","title":"no path"},{"ancestorTitles":["Trade","#bestTradeExactOut"],"failureMessages":[],"fullName":"Trade #bestTradeExactOut works for ETHER currency input","location":null,"status":"passed","title":"works for ETHER currency input"},{"ancestorTitles":["Trade","#bestTradeExactOut"],"failureMessages":[],"fullName":"Trade #bestTradeExactOut works for ETHER currency output","location":null,"status":"passed","title":"works for ETHER currency output"}],"endTime":1636402093250,"message":"","name":"/Users/admin/Desktop/pancakeSwapClone/pancake-swap-sdk/test/trade.test.ts","startTime":1636402093153,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Router","#swapCallParameters","exact in"],"failureMessages":[],"fullName":"Router #swapCallParameters exact in ether to token1","location":null,"status":"passed","title":"ether to token1"},{"ancestorTitles":["Router","#swapCallParameters","exact in"],"failureMessages":[],"fullName":"Router #swapCallParameters exact in deadline specified","location":null,"status":"passed","title":"deadline specified"},{"ancestorTitles":["Router","#swapCallParameters","exact in"],"failureMessages":[],"fullName":"Router #swapCallParameters exact in token1 to ether","location":null,"status":"passed","title":"token1 to ether"},{"ancestorTitles":["Router","#swapCallParameters","exact in"],"failureMessages":[],"fullName":"Router #swapCallParameters exact in token0 to token1","location":null,"status":"passed","title":"token0 to token1"},{"ancestorTitles":["Router","#swapCallParameters","exact out"],"failureMessages":[],"fullName":"Router #swapCallParameters exact out ether to token1","location":null,"status":"passed","title":"ether to token1"},{"ancestorTitles":["Router","#swapCallParameters","exact out"],"failureMessages":[],"fullName":"Router #swapCallParameters exact out token1 to ether","location":null,"status":"passed","title":"token1 to ether"},{"ancestorTitles":["Router","#swapCallParameters","exact out"],"failureMessages":[],"fullName":"Router #swapCallParameters exact out token0 to token1","location":null,"status":"passed","title":"token0 to token1"},{"ancestorTitles":["Router","#swapCallParameters","supporting fee on transfer","exact in"],"failureMessages":[],"fullName":"Router #swapCallParameters supporting fee on transfer exact in ether to token1","location":null,"status":"passed","title":"ether to token1"},{"ancestorTitles":["Router","#swapCallParameters","supporting fee on transfer","exact in"],"failureMessages":[],"fullName":"Router #swapCallParameters supporting fee on transfer exact in token1 to ether","location":null,"status":"passed","title":"token1 to ether"},{"ancestorTitles":["Router","#swapCallParameters","supporting fee on transfer","exact in"],"failureMessages":[],"fullName":"Router #swapCallParameters supporting fee on transfer exact in token0 to token1","location":null,"status":"passed","title":"token0 to token1"},{"ancestorTitles":["Router","#swapCallParameters","supporting fee on transfer","exact out"],"failureMessages":[],"fullName":"Router #swapCallParameters supporting fee on transfer exact out ether to token1","location":null,"status":"passed","title":"ether to token1"},{"ancestorTitles":["Router","#swapCallParameters","supporting fee on transfer","exact out"],"failureMessages":[],"fullName":"Router #swapCallParameters supporting fee on transfer exact out token1 to ether","location":null,"status":"passed","title":"token1 to ether"},{"ancestorTitles":["Router","#swapCallParameters","supporting fee on transfer","exact out"],"failureMessages":[],"fullName":"Router #swapCallParameters supporting fee on transfer exact out token0 to token1","location":null,"status":"passed","title":"token0 to token1"}],"endTime":1636402093313,"message":"","name":"/Users/admin/Desktop/pancakeSwapClone/pancake-swap-sdk/test/router.test.ts","startTime":1636402093253,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["miscellaneous"],"failureMessages":[],"fullName":"miscellaneous getLiquidityMinted:0","location":null,"status":"passed","title":"getLiquidityMinted:0"},{"ancestorTitles":["miscellaneous"],"failureMessages":[],"fullName":"miscellaneous getLiquidityMinted:!0","location":null,"status":"passed","title":"getLiquidityMinted:!0"},{"ancestorTitles":["miscellaneous"],"failureMessages":[],"fullName":"miscellaneous getLiquidityValue:!feeOn","location":null,"status":"passed","title":"getLiquidityValue:!feeOn"},{"ancestorTitles":["miscellaneous"],"failureMessages":[],"fullName":"miscellaneous getLiquidityValue:feeOn","location":null,"status":"passed","title":"getLiquidityValue:feeOn"},{"ancestorTitles":["miscellaneous","#sortedInsert"],"failureMessages":[],"fullName":"miscellaneous #sortedInsert throws if maxSize is 0","location":null,"status":"passed","title":"throws if maxSize is 0"},{"ancestorTitles":["miscellaneous","#sortedInsert"],"failureMessages":[],"fullName":"miscellaneous #sortedInsert throws if items.length > maxSize","location":null,"status":"passed","title":"throws if items.length > maxSize"},{"ancestorTitles":["miscellaneous","#sortedInsert"],"failureMessages":[],"fullName":"miscellaneous #sortedInsert adds if empty","location":null,"status":"passed","title":"adds if empty"},{"ancestorTitles":["miscellaneous","#sortedInsert"],"failureMessages":[],"fullName":"miscellaneous #sortedInsert adds if not full","location":null,"status":"passed","title":"adds if not full"},{"ancestorTitles":["miscellaneous","#sortedInsert"],"failureMessages":[],"fullName":"miscellaneous #sortedInsert adds if will not be full after","location":null,"status":"passed","title":"adds if will not be full after"},{"ancestorTitles":["miscellaneous","#sortedInsert"],"failureMessages":[],"fullName":"miscellaneous #sortedInsert returns add if sorts after last","location":null,"status":"passed","title":"returns add if sorts after last"},{"ancestorTitles":["miscellaneous","#sortedInsert"],"failureMessages":[],"fullName":"miscellaneous #sortedInsert removes from end if full","location":null,"status":"passed","title":"removes from end if full"},{"ancestorTitles":["miscellaneous","#sortedInsert"],"failureMessages":[],"fullName":"miscellaneous #sortedInsert uses comparator","location":null,"status":"passed","title":"uses comparator"},{"ancestorTitles":["miscellaneous","#sortedInsert","maxSize of 1"],"failureMessages":[],"fullName":"miscellaneous #sortedInsert maxSize of 1 empty add","location":null,"status":"passed","title":"empty add"},{"ancestorTitles":["miscellaneous","#sortedInsert","maxSize of 1"],"failureMessages":[],"fullName":"miscellaneous #sortedInsert maxSize of 1 full add greater","location":null,"status":"passed","title":"full add greater"},{"ancestorTitles":["miscellaneous","#sortedInsert","maxSize of 1"],"failureMessages":[],"fullName":"miscellaneous #sortedInsert maxSize of 1 full add lesser","location":null,"status":"passed","title":"full add lesser"}],"endTime":1636402093365,"message":"","name":"/Users/admin/Desktop/pancakeSwapClone/pancake-swap-sdk/test/miscellaneous.test.ts","startTime":1636402093315,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Fraction","#quotient"],"failureMessages":[],"fullName":"Fraction #quotient floor division","location":null,"status":"passed","title":"floor division"},{"ancestorTitles":["Fraction","#remainder"],"failureMessages":[],"fullName":"Fraction #remainder returns fraction after divison","location":null,"status":"passed","title":"returns fraction after divison"},{"ancestorTitles":["Fraction","#invert"],"failureMessages":[],"fullName":"Fraction #invert flips num and denom","location":null,"status":"passed","title":"flips num and denom"},{"ancestorTitles":["Fraction","#add"],"failureMessages":[],"fullName":"Fraction #add multiples denoms and adds nums","location":null,"status":"passed","title":"multiples denoms and adds nums"},{"ancestorTitles":["Fraction","#add"],"failureMessages":[],"fullName":"Fraction #add same denom","location":null,"status":"passed","title":"same denom"},{"ancestorTitles":["Fraction","#subtract"],"failureMessages":[],"fullName":"Fraction #subtract multiples denoms and subtracts nums","location":null,"status":"passed","title":"multiples denoms and subtracts nums"},{"ancestorTitles":["Fraction","#subtract"],"failureMessages":[],"fullName":"Fraction #subtract same denom","location":null,"status":"passed","title":"same denom"},{"ancestorTitles":["Fraction","#lessThan"],"failureMessages":[],"fullName":"Fraction #lessThan correct","location":null,"status":"passed","title":"correct"},{"ancestorTitles":["Fraction","#equalTo"],"failureMessages":[],"fullName":"Fraction #equalTo correct","location":null,"status":"passed","title":"correct"},{"ancestorTitles":["Fraction","#greaterThan"],"failureMessages":[],"fullName":"Fraction #greaterThan correct","location":null,"status":"passed","title":"correct"},{"ancestorTitles":["Fraction","#multiplty"],"failureMessages":[],"fullName":"Fraction #multiplty correct","location":null,"status":"passed","title":"correct"},{"ancestorTitles":["Fraction","#divide"],"failureMessages":[],"fullName":"Fraction #divide correct","location":null,"status":"passed","title":"correct"}],"endTime":1636402093405,"message":"","name":"/Users/admin/Desktop/pancakeSwapClone/pancake-swap-sdk/test/fraction.test.ts","startTime":1636402093368,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Route"],"failureMessages":[],"fullName":"Route constructs a path from the tokens","location":null,"status":"passed","title":"constructs a path from the tokens"},{"ancestorTitles":["Route"],"failureMessages":[],"fullName":"Route can have a token as both input and output","location":null,"status":"passed","title":"can have a token as both input and output"},{"ancestorTitles":["Route"],"failureMessages":[],"fullName":"Route supports ether input","location":null,"status":"passed","title":"supports ether input"},{"ancestorTitles":["Route"],"failureMessages":[],"fullName":"Route supports ether output","location":null,"status":"passed","title":"supports ether output"}],"endTime":1636402093439,"message":"","name":"/Users/admin/Desktop/pancakeSwapClone/pancake-swap-sdk/test/route.test.ts","startTime":1636402093408,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Token","#equals"],"failureMessages":[],"fullName":"Token #equals fails if address differs","location":null,"status":"passed","title":"fails if address differs"},{"ancestorTitles":["Token","#equals"],"failureMessages":[],"fullName":"Token #equals false if chain id differs","location":null,"status":"passed","title":"false if chain id differs"},{"ancestorTitles":["Token","#equals"],"failureMessages":[],"fullName":"Token #equals true if only decimals differs","location":null,"status":"passed","title":"true if only decimals differs"},{"ancestorTitles":["Token","#equals"],"failureMessages":[],"fullName":"Token #equals true if address is the same","location":null,"status":"passed","title":"true if address is the same"},{"ancestorTitles":["Token","#equals"],"failureMessages":[],"fullName":"Token #equals true on reference equality","location":null,"status":"passed","title":"true on reference equality"},{"ancestorTitles":["Token","#equals"],"failureMessages":[],"fullName":"Token #equals true even if name/symbol/decimals/projectLink differ","location":null,"status":"passed","title":"true even if name/symbol/decimals/projectLink differ"}],"endTime":1636402093470,"message":"","name":"/Users/admin/Desktop/pancakeSwapClone/pancake-swap-sdk/test/token.test.ts","startTime":1636402093443,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["data"],"failureMessages":[],"fullName":"data Token","location":null,"status":"pending","title":"Token"},{"ancestorTitles":["data"],"failureMessages":[],"fullName":"data Token:CACHE","location":null,"status":"pending","title":"Token:CACHE"},{"ancestorTitles":["data"],"failureMessages":[],"fullName":"data Pair","location":null,"status":"pending","title":"Pair"}],"endTime":1636402093496,"message":"","name":"/Users/admin/Desktop/pancakeSwapClone/pancake-swap-sdk/test/data.test.ts","startTime":1636402093475,"status":"passed","summary":""}],"wasInterrupted":false}info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.
